
1. Schema do Banco de Dados (shared/schema.ts)
// Define as tabelas principais: usuários, categorias e tarefas
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  name: text("name").notNull(),
  role: text("role").notNull(), // 'manager' or 'collaborator'
});
export const categories = pgTable("categories", {
  id: serial("id").primaryKey(),
  name: text("name").notNull().unique(),
  color: text("color").notNull().default('#1976D2'),
});
export const tasks = pgTable("tasks", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  description: text("description"),
  status: text("status").notNull().default('pending'),
  assigneeId: integer("assignee_id").references(() => users.id),
  categoryId: integer("category_id").references(() => categories.id),
  dueDate: text("due_date"),
  createdBy: integer("created_by").notNull().references(() => users.id),
});

Opened server/storage.ts
2. Sistema de Armazenamento em Memória (server/storage.ts)
export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private categories: Map<number, Category>;
  private tasks: Map<number, Task>;
  constructor() {
    this.users = new Map();
    this.categories = new Map();
    this.tasks = new Map();
    
    // Inicializa com dados padrão
    this.initializeData();
  }
  private async initializeData() {
    // Cria gerente padrão
    await this.createUser({
      username: 'admin',
      password: 'admin123',
      name: 'João Silva',
      role: 'manager'
    });
    // Cria categorias padrão
    await this.createCategory({ name: 'Frontend', color: '#1976D2' });
    await this.createCategory({ name: 'Backend', color: '#9C27B0' });
    await this.createCategory({ name: 'Design', color: '#E91E63' });
    await this.createCategory({ name: 'QA', color: '#FF9800' });
    // Cria colaboradores padrão
    await this.createUser({
      username: 'maria',
      password: 'maria123',
      name: 'Maria Santos',
      role: 'collaborator'
    });
  }

Opened server/routes.ts
3. API Routes (server/routes.ts)
// Rota de autenticação
app.post("/api/auth/login", async (req, res) => {
  try {
    const { username, password } = loginSchema.parse(req.body);
    const user = await storage.getUserByUsername(username);
    
    if (!user || user.password !== password) {
      return res.status(401).json({ message: "Invalid username or password" });
    }
    const { password: _, ...userWithoutPassword } = user;
    res.json({ user: userWithoutPassword });
  } catch (error) {
    res.status(500).json({ message: "Internal server error" });
  }
});
// Rotas de colaboradores
app.get("/api/collaborators", async (req, res) => {
  const collaborators = await storage.getAllCollaborators();
  res.json(collaborators);
});
// Rotas de tarefas
app.get("/api/tasks", async (req, res) => {
  const tasks = await storage.getAllTasks();
  res.json(tasks);
});
app.post("/api/tasks", async (req, res) => {
  const taskData = insertTaskSchema.parse(req.body);
  const task = await storage.createTask(taskData);
  res.status(201).json(task);
});

Opened client/src/pages/dashboard.tsx
4. Frontend Dashboard (client/src/pages/dashboard.tsx)
export default function Dashboard() {
  const { user } = useAuth();
  const userIsManager = isManager(user);
  
  // Estados dos modais e filtros
  const [taskModalOpen, setTaskModalOpen] = useState(false);
  const [collaboratorModalOpen, setCollaboratorModalOpen] = useState(false);
  const [collaboratorFilter, setCollaboratorFilter] = useState<string>("all");
  const [categoryFilter, setCategoryFilter] = useState<string>("all");
  const [statusFilter, setStatusFilter] = useState<string>("all");
  // Busca dados com React Query
  const { data: stats } = useQuery({
    queryKey: ['/api/stats'],
  });
  const { data: tasks = [] } = useQuery<TaskWithDetails[]>({
    queryKey: userIsManager ? ['/api/tasks'] : [`/api/tasks/assignee/${user?.id}`],
  });
  // Filtros de tarefas
  const filteredTasks = tasks.filter(task => {
    if (collaboratorFilter !== "all" && task.assigneeId !== parseInt(collaboratorFilter)) return false;
    if (categoryFilter !== "all" && task.categoryId !== parseInt(categoryFilter)) return false;
    if (statusFilter !== "all" && task.status !== statusFilter) return false;
    return true;
  });

Opened client/src/components/modals/task-modal.tsx
5. Modal de Criação/Edição de Tarefas (client/src/components/modals/task-modal.tsx)
export function TaskModal({ open, onOpenChange, task }: TaskModalProps) {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // Formulário com validação Zod
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: task?.title || "",
      description: task?.description || "",
      status: task?.status || "pending",
      assigneeId: task?.assigneeId || undefined,
      categoryId: task?.categoryId || undefined,
      dueDate: task?.dueDate || "",
      createdBy: user?.id || 0,
    },
  });
  // Busca colaboradores e categorias
  const { data: collaborators = [] } = useQuery<User[]>({
    queryKey: ['/api/collaborators'],
  });
  const { data: categories = [] } = useQuery<Category[]>({
    queryKey: ['/api/categories'],
  });
  // Mutação para criar tarefa
  const createMutation = useMutation({
    mutationFn: async (data: any) => {
      const response = await apiRequest('POST', '/api/tasks', data);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });
      toast({ title: "Tarefa criada com sucesso!" });
      onOpenChange(false);
    },
  });

Opened client/src/components/tables/tasks-table.tsx
6. Tabela de Tarefas com Controle de Status (client/src/components/tables/tasks-table.tsx)
// Mutação para atualizar status da tarefa
const statusUpdateMutation = useMutation({
  mutationFn: async ({ taskId, status }: { taskId: number; status: string }) => {
    await apiRequest('PATCH', `/api/tasks/${taskId}/status`, { status });
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });
    queryClient.invalidateQueries({ queryKey: ['/api/stats'] });
    toast({ title: "Status da tarefa atualizado!" });
  },
});
// Configuração dos badges de status
const getStatusBadge = (status: string) => {
  const statusConfig = {
    pending: { label: 'Pendente', className: 'status-pending' },
    'in-progress': { label: 'Em Andamento', className: 'status-in-progress' },
    completed: { label: 'Concluída', className: 'status-completed' },
  };
  const config = statusConfig[status] || statusConfig.pending;
  
  return (
    <Badge className={`status-badge ${config.className}`}>
      {config.label}
    </Badge>
  );
};
// Controle de permissões
const canEditTask = (task: TaskWithDetails) => {
  return userIsManager || task.assigneeId === user?.id;
};
7. Sistema de Autenticação (client/src/hooks/use-auth.tsx)
export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<AuthUser | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  useEffect(() => {
    const storedUser = getAuthUser();
    setUser(storedUser);
    setIsLoading(false);
  }, []);
  const login = (user: AuthUser) => {
    setUser(user);
    setAuthUser(user);
  };
  const logout = () => {
    setUser(null);
    clearAuthUser();
  };
